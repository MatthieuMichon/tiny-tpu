$date
	Tue Aug  5 02:38:31 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module loss_child $end
$var wire 16 ! H_in [15:0] $end
$var wire 16 " Y_in [15:0] $end
$var wire 1 # clk $end
$var wire 16 $ inv_batch_size_times_two_in [15:0] $end
$var wire 1 % rst $end
$var wire 1 & valid_in $end
$var wire 16 ' final_gradient [15:0] $end
$var wire 16 ( diff_stage1 [15:0] $end
$var reg 16 ) gradient_out [15:0] $end
$var reg 1 * valid_out $end
$scope module multiplier $end
$var wire 16 + inb [15:0] $end
$var wire 32 , res [31:0] $end
$var wire 1 - overflow $end
$var wire 16 . out [15:0] $end
$var wire 16 / ina [15:0] $end
$var parameter 32 0 ROUND $end
$var parameter 32 1 WIFA $end
$var parameter 32 2 WIFB $end
$var parameter 32 3 WIIA $end
$var parameter 32 4 WIIB $end
$var parameter 32 5 WOF $end
$var parameter 32 6 WOI $end
$var parameter 33 7 WRF $end
$var parameter 33 8 WRI $end
$scope module res_zoom $end
$var wire 32 9 in [31:0] $end
$var wire 16 : out [15:0] $end
$var parameter 32 ; ROUND $end
$var parameter 33 < WIF $end
$var parameter 33 = WII $end
$var parameter 32 > WOF $end
$var parameter 32 ? WOI $end
$var reg 16 @ ini [15:0] $end
$var reg 24 A inr [23:0] $end
$var reg 8 B outf [7:0] $end
$var reg 8 C outi [7:0] $end
$var reg 1 - overflow $end
$scope begin genblk1 $end
$scope begin genblk1 $end
$upscope $end
$upscope $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$scope module subtractor $end
$var wire 16 D ina [15:0] $end
$var wire 16 E inb [15:0] $end
$var wire 17 F inbv [16:0] $end
$var wire 1 G sub $end
$var wire 18 H res [17:0] $end
$var wire 1 I overflow $end
$var wire 16 J out [15:0] $end
$var wire 17 K inbz [16:0] $end
$var wire 17 L inbe [16:0] $end
$var wire 17 M inaz [16:0] $end
$var parameter 17 N ONE $end
$var parameter 32 O ROUND $end
$var parameter 32 P WIF $end
$var parameter 32 Q WIFA $end
$var parameter 32 R WIFB $end
$var parameter 33 S WII $end
$var parameter 32 T WIIA $end
$var parameter 32 U WIIB $end
$var parameter 33 V WIIBE $end
$var parameter 32 W WOF $end
$var parameter 32 X WOI $end
$var parameter 32 Y WRF $end
$var parameter 34 Z WRI $end
$scope module ina_zoom $end
$var wire 16 [ in [15:0] $end
$var wire 17 \ out [16:0] $end
$var parameter 32 ] ROUND $end
$var parameter 32 ^ WIF $end
$var parameter 32 _ WII $end
$var parameter 32 ` WOF $end
$var parameter 33 a WOI $end
$var reg 8 b ini [7:0] $end
$var reg 16 c inr [15:0] $end
$var reg 8 d outf [7:0] $end
$var reg 9 e outi [8:0] $end
$var reg 1 f overflow $end
$scope begin genblk1 $end
$upscope $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope module inb_extend $end
$var wire 16 g in [15:0] $end
$var wire 17 h out [16:0] $end
$var parameter 32 i ROUND $end
$var parameter 32 j WIF $end
$var parameter 32 k WII $end
$var parameter 32 l WOF $end
$var parameter 33 m WOI $end
$var reg 8 n ini [7:0] $end
$var reg 16 o inr [15:0] $end
$var reg 8 p outf [7:0] $end
$var reg 9 q outi [8:0] $end
$var reg 1 r overflow $end
$scope begin genblk1 $end
$upscope $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 17 s in [16:0] $end
$var wire 17 t out [16:0] $end
$var parameter 32 u ROUND $end
$var parameter 32 v WIF $end
$var parameter 33 w WII $end
$var parameter 32 x WOF $end
$var parameter 33 y WOI $end
$var reg 9 z ini [8:0] $end
$var reg 17 { inr [16:0] $end
$var reg 8 | outf [7:0] $end
$var reg 9 } outi [8:0] $end
$var reg 1 ~ overflow $end
$scope begin genblk1 $end
$upscope $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 18 !" in [17:0] $end
$var wire 16 "" out [15:0] $end
$var parameter 32 #" ROUND $end
$var parameter 32 $" WIF $end
$var parameter 34 %" WII $end
$var parameter 32 &" WOF $end
$var parameter 32 '" WOI $end
$var reg 10 (" ini [9:0] $end
$var reg 18 )" inr [17:0] $end
$var reg 8 *" outf [7:0] $end
$var reg 8 +" outi [7:0] $end
$var reg 1 I overflow $end
$scope begin genblk1 $end
$upscope $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 '"
b1000 &"
b1010 %"
b1000 $"
b1 #"
b1001 y
b1000 x
b1001 w
b1000 v
b0 u
b1001 m
b1000 l
b1000 k
b1000 j
b0 i
b1001 a
b1000 `
b1000 _
b1000 ^
b0 ]
b1010 Z
b1000 Y
b1000 X
b1000 W
b1001 V
b1000 U
b1000 T
b1001 S
b1000 R
b1000 Q
b1000 P
b1 O
b1 N
b1000 ?
b1000 >
b10000 =
b10000 <
b1 ;
b10000 8
b10000 7
b1000 6
b1000 5
b1000 4
b1000 3
b1000 2
b1000 1
b1 0
$end
#0
$dumpvars
b0 +"
b10101111 *"
b10101111 )"
b0 ("
b10101111 ""
b10101111 !"
0~
b0 }
b0 |
b0 {
b0 z
b0 t
b0 s
0r
b0 q
b0 p
b0 o
b0 n
b0 h
b0 g
0f
b0 e
b10101111 d
b10101111 c
b0 b
b10101111 \
b10101111 [
b10101111 M
b0 L
b0 K
b10101111 J
0I
b10101111 H
1G
b0 F
b0 E
b10101111 D
b0 C
b1011000 B
b1011000 A
b0 @
b1011000 :
b101011110000000 9
b10101111 /
b1011000 .
0-
b101011110000000 ,
b10000000 +
0*
b0 )
b10101111 (
b1011000 '
1&
0%
b10000000 $
1#
b0 "
b10101111 !
$end
#5000
0#
#10000
b11111111 C
b1111111111111111 @
b11111111 +"
b1111111111 ("
b1111111111100111 '
b1111111111100111 .
b1111111111100111 :
b11100111 B
b11111111100000000 K
b11111111100000000 t
b111111111 }
b111111111 z
b111111111111111111100111 A
b11111111100000000 {
b11111111111111111110011100000000 ,
b11111111111111111110011100000000 9
b1111111111001110 (
b1111111111001110 /
b1111111111001110 J
b1111111111001110 ""
b11001110 *"
b11111111100000000 F
b11111111100000000 s
b111111111111001110 )"
b100000000 L
b100000000 h
b1 q
b1 n
b111111111111001110 H
b111111111111001110 !"
b11001110 M
b11001110 \
b11001110 d
b100000000 o
b11001110 c
b100000000 "
b100000000 E
b100000000 g
b11001110 !
b11001110 D
b11001110 [
b1011000 )
1*
1#
#15000
0#
#20000
b1111111110111111 '
b1111111110111111 .
b1111111110111111 :
b10111111 B
b111111111111111110111111 A
b11111111111111111011111100000000 ,
b11111111111111111011111100000000 9
b1111111101111110 (
b1111111101111110 /
b1111111101111110 J
b1111111101111110 ""
b1111110 *"
b111111111101111110 )"
b111111111101111110 H
b111111111101111110 !"
b1111110 M
b1111110 \
b1111110 d
b1111110 c
b1111110 !
b1111110 D
b1111110 [
b1111111111100111 )
1#
#25000
0#
#30000
b0 C
b0 @
b0 +"
b0 ("
b1000110 '
b1000110 .
b1000110 :
b1000110 B
b0 K
b0 t
b0 }
b0 z
b1000110 A
b0 {
b100011000000000 ,
b100011000000000 9
b10001100 (
b10001100 /
b10001100 J
b10001100 ""
b10001100 *"
b0 F
b0 s
b10001100 )"
b0 L
b0 h
b0 q
b0 n
b10001100 H
b10001100 !"
b10001100 M
b10001100 \
b10001100 d
b0 o
b10001100 c
b0 "
b0 E
b0 g
b10001100 !
b10001100 D
b10001100 [
b1111111110111111 )
1#
#35000
0#
#40000
0&
b1000110 )
1#
#45000
0#
#50000
0*
1#
#55000
0#
#60000
1#
#65000
0#
#70000
1#
#75000
0#
#80000
1#
#85000
0#
#90000
1#
#95000
0#
#100000
1#
#105000
0#
#110000
1#
#115000
0#
#120000
1#
#125000
0#
#130000
1#
#135000
0#
#140000
1#
#140001
