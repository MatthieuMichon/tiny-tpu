$date
	Mon May 19 22:40:44 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module systolic $end
$var wire 1 ! clk $end
$var wire 1 " done $end
$var wire 16 # input_11 [15:0] $end
$var wire 16 $ input_21 [15:0] $end
$var wire 1 % load_weights $end
$var wire 1 & rst $end
$var wire 1 ' start $end
$var wire 16 ( weight_11 [15:0] $end
$var wire 16 ) weight_12 [15:0] $end
$var wire 16 * weight_21 [15:0] $end
$var wire 16 + weight_22 [15:0] $end
$var wire 16 , zero_wire_inputs [15:0] $end
$var wire 16 - zero_wire_outputs [15:0] $end
$var wire 16 . psum_12 [15:0] $end
$var wire 16 / psum_11 [15:0] $end
$var wire 16 0 out_22 [15:0] $end
$var wire 16 1 out_21 [15:0] $end
$var wire 16 2 input_21_out [15:0] $end
$var wire 16 3 input_11_out [15:0] $end
$scope module pe11 $end
$var wire 1 ! clk $end
$var wire 16 4 input_in [15:0] $end
$var wire 1 % load_weight $end
$var wire 16 5 psum_in [15:0] $end
$var wire 1 & rst $end
$var wire 1 ' start $end
$var wire 16 6 weight [15:0] $end
$var wire 16 7 psum_reg [15:0] $end
$var wire 16 8 mult_out [15:0] $end
$var reg 16 9 input_out [15:0] $end
$var reg 16 : psum_out [15:0] $end
$var reg 16 ; weight_reg [15:0] $end
$scope module adder $end
$var wire 16 < inb [15:0] $end
$var wire 17 = res [16:0] $end
$var wire 1 > overflow $end
$var wire 16 ? out [15:0] $end
$var wire 16 @ inbz [15:0] $end
$var wire 16 A inaz [15:0] $end
$var wire 16 B ina [15:0] $end
$scope module ina_zoom $end
$var wire 16 C out [15:0] $end
$var wire 16 D in [15:0] $end
$var reg 8 E ini [7:0] $end
$var reg 16 F inr [15:0] $end
$var reg 8 G outf [7:0] $end
$var reg 8 H outi [7:0] $end
$var reg 1 I overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 16 J in [15:0] $end
$var wire 16 K out [15:0] $end
$var reg 8 L ini [7:0] $end
$var reg 16 M inr [15:0] $end
$var reg 8 N outf [7:0] $end
$var reg 8 O outi [7:0] $end
$var reg 1 P overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 17 Q in [16:0] $end
$var wire 16 R out [15:0] $end
$var reg 9 S ini [8:0] $end
$var reg 17 T inr [16:0] $end
$var reg 8 U outf [7:0] $end
$var reg 8 V outi [7:0] $end
$var reg 1 > overflow $end
$scope begin genblk7 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module mult $end
$var wire 16 W ina [15:0] $end
$var wire 16 X inb [15:0] $end
$var wire 32 Y res [31:0] $end
$var wire 1 Z overflow $end
$var wire 16 [ out [15:0] $end
$scope module res_zoom $end
$var wire 32 \ in [31:0] $end
$var wire 16 ] out [15:0] $end
$var reg 16 ^ ini [15:0] $end
$var reg 24 _ inr [23:0] $end
$var reg 8 ` outf [7:0] $end
$var reg 8 a outi [7:0] $end
$var reg 1 Z overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module pe12 $end
$var wire 1 ! clk $end
$var wire 16 b input_in [15:0] $end
$var wire 1 % load_weight $end
$var wire 16 c psum_in [15:0] $end
$var wire 1 & rst $end
$var wire 1 ' start $end
$var wire 16 d weight [15:0] $end
$var wire 16 e psum_reg [15:0] $end
$var wire 16 f mult_out [15:0] $end
$var reg 16 g input_out [15:0] $end
$var reg 16 h psum_out [15:0] $end
$var reg 16 i weight_reg [15:0] $end
$scope module adder $end
$var wire 16 j inb [15:0] $end
$var wire 17 k res [16:0] $end
$var wire 1 l overflow $end
$var wire 16 m out [15:0] $end
$var wire 16 n inbz [15:0] $end
$var wire 16 o inaz [15:0] $end
$var wire 16 p ina [15:0] $end
$scope module ina_zoom $end
$var wire 16 q out [15:0] $end
$var wire 16 r in [15:0] $end
$var reg 8 s ini [7:0] $end
$var reg 16 t inr [15:0] $end
$var reg 8 u outf [7:0] $end
$var reg 8 v outi [7:0] $end
$var reg 1 w overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 16 x in [15:0] $end
$var wire 16 y out [15:0] $end
$var reg 8 z ini [7:0] $end
$var reg 16 { inr [15:0] $end
$var reg 8 | outf [7:0] $end
$var reg 8 } outi [7:0] $end
$var reg 1 ~ overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 17 !" in [16:0] $end
$var wire 16 "" out [15:0] $end
$var reg 9 #" ini [8:0] $end
$var reg 17 $" inr [16:0] $end
$var reg 8 %" outf [7:0] $end
$var reg 8 &" outi [7:0] $end
$var reg 1 l overflow $end
$scope begin genblk7 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module mult $end
$var wire 16 '" ina [15:0] $end
$var wire 16 (" inb [15:0] $end
$var wire 32 )" res [31:0] $end
$var wire 1 *" overflow $end
$var wire 16 +" out [15:0] $end
$scope module res_zoom $end
$var wire 32 ," in [31:0] $end
$var wire 16 -" out [15:0] $end
$var reg 16 ." ini [15:0] $end
$var reg 24 /" inr [23:0] $end
$var reg 8 0" outf [7:0] $end
$var reg 8 1" outi [7:0] $end
$var reg 1 *" overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module pe21 $end
$var wire 1 ! clk $end
$var wire 16 2" input_in [15:0] $end
$var wire 1 % load_weight $end
$var wire 16 3" psum_in [15:0] $end
$var wire 1 & rst $end
$var wire 1 ' start $end
$var wire 16 4" weight [15:0] $end
$var wire 16 5" psum_reg [15:0] $end
$var wire 16 6" mult_out [15:0] $end
$var reg 16 7" input_out [15:0] $end
$var reg 16 8" psum_out [15:0] $end
$var reg 16 9" weight_reg [15:0] $end
$scope module adder $end
$var wire 16 :" inb [15:0] $end
$var wire 17 ;" res [16:0] $end
$var wire 1 <" overflow $end
$var wire 16 =" out [15:0] $end
$var wire 16 >" inbz [15:0] $end
$var wire 16 ?" inaz [15:0] $end
$var wire 16 @" ina [15:0] $end
$scope module ina_zoom $end
$var wire 16 A" out [15:0] $end
$var wire 16 B" in [15:0] $end
$var reg 8 C" ini [7:0] $end
$var reg 16 D" inr [15:0] $end
$var reg 8 E" outf [7:0] $end
$var reg 8 F" outi [7:0] $end
$var reg 1 G" overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 16 H" in [15:0] $end
$var wire 16 I" out [15:0] $end
$var reg 8 J" ini [7:0] $end
$var reg 16 K" inr [15:0] $end
$var reg 8 L" outf [7:0] $end
$var reg 8 M" outi [7:0] $end
$var reg 1 N" overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 17 O" in [16:0] $end
$var wire 16 P" out [15:0] $end
$var reg 9 Q" ini [8:0] $end
$var reg 17 R" inr [16:0] $end
$var reg 8 S" outf [7:0] $end
$var reg 8 T" outi [7:0] $end
$var reg 1 <" overflow $end
$scope begin genblk7 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module mult $end
$var wire 16 U" ina [15:0] $end
$var wire 16 V" inb [15:0] $end
$var wire 32 W" res [31:0] $end
$var wire 1 X" overflow $end
$var wire 16 Y" out [15:0] $end
$scope module res_zoom $end
$var wire 32 Z" in [31:0] $end
$var wire 16 [" out [15:0] $end
$var reg 16 \" ini [15:0] $end
$var reg 24 ]" inr [23:0] $end
$var reg 8 ^" outf [7:0] $end
$var reg 8 _" outi [7:0] $end
$var reg 1 X" overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module pe22 $end
$var wire 1 ! clk $end
$var wire 16 `" input_in [15:0] $end
$var wire 1 % load_weight $end
$var wire 16 a" psum_in [15:0] $end
$var wire 1 & rst $end
$var wire 1 ' start $end
$var wire 16 b" weight [15:0] $end
$var wire 16 c" psum_reg [15:0] $end
$var wire 16 d" mult_out [15:0] $end
$var reg 16 e" input_out [15:0] $end
$var reg 16 f" psum_out [15:0] $end
$var reg 16 g" weight_reg [15:0] $end
$scope module adder $end
$var wire 16 h" inb [15:0] $end
$var wire 17 i" res [16:0] $end
$var wire 1 j" overflow $end
$var wire 16 k" out [15:0] $end
$var wire 16 l" inbz [15:0] $end
$var wire 16 m" inaz [15:0] $end
$var wire 16 n" ina [15:0] $end
$scope module ina_zoom $end
$var wire 16 o" out [15:0] $end
$var wire 16 p" in [15:0] $end
$var reg 8 q" ini [7:0] $end
$var reg 16 r" inr [15:0] $end
$var reg 8 s" outf [7:0] $end
$var reg 8 t" outi [7:0] $end
$var reg 1 u" overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 16 v" in [15:0] $end
$var wire 16 w" out [15:0] $end
$var reg 8 x" ini [7:0] $end
$var reg 16 y" inr [15:0] $end
$var reg 8 z" outf [7:0] $end
$var reg 8 {" outi [7:0] $end
$var reg 1 |" overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 17 }" in [16:0] $end
$var wire 16 ~" out [15:0] $end
$var reg 9 !# ini [8:0] $end
$var reg 17 "# inr [16:0] $end
$var reg 8 ## outf [7:0] $end
$var reg 8 $# outi [7:0] $end
$var reg 1 j" overflow $end
$scope begin genblk7 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module mult $end
$var wire 16 %# ina [15:0] $end
$var wire 16 &# inb [15:0] $end
$var wire 32 '# res [31:0] $end
$var wire 1 (# overflow $end
$var wire 16 )# out [15:0] $end
$scope module res_zoom $end
$var wire 32 *# in [31:0] $end
$var wire 16 +# out [15:0] $end
$var reg 16 ,# ini [15:0] $end
$var reg 24 -# inr [23:0] $end
$var reg 8 .# outf [7:0] $end
$var reg 8 /# outi [7:0] $end
$var reg 1 (# overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
bx *#
b0 )#
0(#
bx '#
bx &#
bx %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
b0 }"
0|"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
bx v"
0u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
0j"
b0 i"
bx h"
bx g"
bx f"
bx e"
b0 d"
b0 c"
bz b"
bx a"
bx `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
bx Z"
b0 Y"
0X"
bx W"
bx V"
bz U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
0N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
bx H"
0G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
0<"
b0 ;"
bx :"
bx 9"
bx 8"
bx 7"
b0 6"
b0 5"
bz 4"
bx 3"
bz 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
bx ,"
b0 +"
0*"
bx )"
bx ("
bx '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
0~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
0w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
0l
b0 k
b0 j
bx i
bx h
bx g
b0 f
b0 e
bz d
b0 c
bx b
b0 a
b0 `
b0 _
b0 ^
b0 ]
bx \
b0 [
0Z
bx Y
bx X
bz W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
0P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
0I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
0>
b0 =
b0 <
bx ;
bx :
bx 9
b0 8
b0 7
bz 6
b0 5
bz 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
b0 ,
bz +
bz *
bz )
bz (
z'
z&
z%
bz $
bz #
0"
z!
$end
#1
