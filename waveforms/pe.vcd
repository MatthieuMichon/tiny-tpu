$date
	Sun May 25 20:47:28 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module pe $end
$var wire 1 ! clk $end
$var wire 16 " input_in [15:0] $end
$var wire 1 # pe_accept_w $end
$var wire 16 $ pe_psum_in [15:0] $end
$var wire 1 % pe_valid_in $end
$var wire 16 & pe_weight_in [15:0] $end
$var wire 1 ' rst $end
$var wire 16 ( psum_reg [15:0] $end
$var wire 16 ) mult_out [15:0] $end
$var reg 16 * input_out [15:0] $end
$var reg 1 + pe_valid_out $end
$var reg 16 , psum_out [15:0] $end
$var reg 16 - weight_reg [15:0] $end
$scope module adder $end
$var wire 16 . inb [15:0] $end
$var wire 17 / res [16:0] $end
$var wire 1 0 overflow $end
$var wire 16 1 out [15:0] $end
$var wire 16 2 inbz [15:0] $end
$var wire 16 3 inaz [15:0] $end
$var wire 16 4 ina [15:0] $end
$scope module ina_zoom $end
$var wire 16 5 out [15:0] $end
$var wire 16 6 in [15:0] $end
$var reg 8 7 ini [7:0] $end
$var reg 16 8 inr [15:0] $end
$var reg 8 9 outf [7:0] $end
$var reg 8 : outi [7:0] $end
$var reg 1 ; overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 16 < in [15:0] $end
$var wire 16 = out [15:0] $end
$var reg 8 > ini [7:0] $end
$var reg 16 ? inr [15:0] $end
$var reg 8 @ outf [7:0] $end
$var reg 8 A outi [7:0] $end
$var reg 1 B overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 17 C in [16:0] $end
$var wire 16 D out [15:0] $end
$var reg 9 E ini [8:0] $end
$var reg 17 F inr [16:0] $end
$var reg 8 G outf [7:0] $end
$var reg 8 H outi [7:0] $end
$var reg 1 0 overflow $end
$scope begin genblk7 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module mult $end
$var wire 16 I ina [15:0] $end
$var wire 16 J inb [15:0] $end
$var wire 32 K res [31:0] $end
$var wire 1 L overflow $end
$var wire 16 M out [15:0] $end
$scope module res_zoom $end
$var wire 32 N in [31:0] $end
$var wire 16 O out [15:0] $end
$var reg 16 P ini [15:0] $end
$var reg 24 Q inr [23:0] $end
$var reg 8 R outf [7:0] $end
$var reg 8 S outi [7:0] $end
$var reg 1 L overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
0L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
0B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
0;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
00
b0 /
b0 .
b0 -
b0 ,
x+
b0 *
b0 )
b0 (
0'
b0 &
0%
b0 $
0#
b0 "
1!
$end
#5000
0!
#10000
b101000000000 &
1#
0+
1!
#15000
0!
#20000
b1010000000000 3
b1010000000000 5
b10100 :
b10100 7
b100011000000000 (
b100011000000000 1
b100011000000000 D
b1000110 H
b1000110 E
b1010000000000 8
b100011000000000 F
b1010000000000 )
b1010000000000 4
b1010000000000 6
b1010000000000 M
b1010000000000 O
b10100 S
b10100 P
b100011000000000 /
b100011000000000 C
b11001000000000 2
b11001000000000 =
b110010 A
b110010 >
b1010000000000 Q
b11001000000000 ?
b101000000000000000000 K
b101000000000000000000 N
b1000000000 "
b1000000000 I
b11001000000000 $
b11001000000000 .
b11001000000000 <
b0 &
1%
0#
b101000000000 -
b101000000000 J
1!
#25000
0!
#30000
b0 3
b0 5
b0 :
b0 7
b0 (
b0 1
b0 D
b0 H
b0 E
b0 8
b0 F
b0 )
b0 4
b0 6
b0 M
b0 O
b0 S
b0 P
b0 /
b0 C
b0 2
b0 =
b0 A
b0 >
b0 Q
b0 ?
0%
b0 K
b0 N
b0 "
b0 I
b0 $
b0 .
b0 <
1+
b100011000000000 ,
b1000000000 *
1!
#35000
0!
#40000
b0 ,
0+
1!
#45000
0!
#50000
1!
#55000
0!
#60000
1!
#65000
0!
#70000
1!
#75000
0!
#80000
1!
#80001
