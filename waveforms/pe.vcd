$date
	Mon May 19 21:48:21 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module pe $end
$var wire 1 ! clk $end
$var wire 16 " input_in [15:0] $end
$var wire 1 # load_weight $end
$var wire 16 $ psum_in [15:0] $end
$var wire 1 % rst $end
$var wire 1 & start $end
$var wire 16 ' weight [15:0] $end
$var wire 16 ( psum_reg [15:0] $end
$var wire 16 ) mult_out [15:0] $end
$var reg 16 * input_out [15:0] $end
$var reg 16 + psum_out [15:0] $end
$var reg 16 , weight_reg [15:0] $end
$scope module adder $end
$var wire 16 - inb [15:0] $end
$var wire 17 . res [16:0] $end
$var wire 1 / overflow $end
$var wire 16 0 out [15:0] $end
$var wire 16 1 inbz [15:0] $end
$var wire 16 2 inaz [15:0] $end
$var wire 16 3 ina [15:0] $end
$scope module ina_zoom $end
$var wire 16 4 out [15:0] $end
$var wire 16 5 in [15:0] $end
$var reg 8 6 ini [7:0] $end
$var reg 16 7 inr [15:0] $end
$var reg 8 8 outf [7:0] $end
$var reg 8 9 outi [7:0] $end
$var reg 1 : overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 16 ; in [15:0] $end
$var wire 16 < out [15:0] $end
$var reg 8 = ini [7:0] $end
$var reg 16 > inr [15:0] $end
$var reg 8 ? outf [7:0] $end
$var reg 8 @ outi [7:0] $end
$var reg 1 A overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 17 B in [16:0] $end
$var wire 16 C out [15:0] $end
$var reg 9 D ini [8:0] $end
$var reg 17 E inr [16:0] $end
$var reg 8 F outf [7:0] $end
$var reg 8 G outi [7:0] $end
$var reg 1 / overflow $end
$scope begin genblk7 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module mult $end
$var wire 16 H ina [15:0] $end
$var wire 16 I inb [15:0] $end
$var wire 32 J res [31:0] $end
$var wire 1 K overflow $end
$var wire 16 L out [15:0] $end
$scope module res_zoom $end
$var wire 32 M in [31:0] $end
$var wire 16 N out [15:0] $end
$var reg 16 O ini [15:0] $end
$var reg 24 P inr [23:0] $end
$var reg 8 Q outf [7:0] $end
$var reg 8 R outi [7:0] $end
$var reg 1 K overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
0K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
0A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
0:
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
0/
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
0&
1%
b0 $
0#
b0 "
1!
$end
#5000
0!
#10000
b1010000000 ,
b1010000000 I
1!
1#
b1010000000 '
0%
#15000
0!
#20000
b1100000000 *
b10000000 F
b100010000000 (
b100010000000 0
b100010000000 C
b1000 G
b1000 D
b111 9
b111 6
b11110000000 2
b11110000000 4
b10000000 8
b100010000000 E
b11110000000 7
b100010000000 .
b100010000000 B
b100000000 1
b100000000 <
b1 @
b1 =
b111 R
b111 O
b11110000000 )
b11110000000 3
b11110000000 5
b11110000000 L
b11110000000 N
b10000000 Q
b100000000 >
b11110000000 P
1!
1&
b100000000 $
b100000000 -
b100000000 ;
b1111000000000000000 J
b1111000000000000000 M
b1100000000 "
b1100000000 H
0#
#25000
0!
#30000
b100010000000 +
1!
0&
#35000
0!
#40001
