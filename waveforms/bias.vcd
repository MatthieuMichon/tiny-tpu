$date
	Sun Jun  1 13:19:24 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module bias $end
$var wire 1 ! bias_backward $end
$var wire 16 " bias_scalar_in [15:0] $end
$var wire 1 # bias_switch_in $end
$var wire 16 $ bias_sys_data_in [15:0] $end
$var wire 1 % bias_valid_in $end
$var wire 1 & clk $end
$var wire 1 ' load_bias_in $end
$var wire 1 ( rst $end
$var wire 16 ) add_out [15:0] $end
$var reg 16 * bias_active [15:0] $end
$var reg 16 + bias_data_out [15:0] $end
$var reg 16 , bias_inactive [15:0] $end
$var reg 16 - bias_scalar_out [15:0] $end
$var reg 1 . bias_valid_out $end
$scope module add_inst $end
$var wire 16 / ina [15:0] $end
$var wire 16 0 inb [15:0] $end
$var wire 17 1 res [16:0] $end
$var wire 1 2 overflow $end
$var wire 16 3 out [15:0] $end
$var wire 16 4 inbz [15:0] $end
$var wire 16 5 inaz [15:0] $end
$var parameter 32 6 ROUND $end
$var parameter 32 7 WIF $end
$var parameter 32 8 WIFA $end
$var parameter 32 9 WIFB $end
$var parameter 32 : WII $end
$var parameter 32 ; WIIA $end
$var parameter 32 < WIIB $end
$var parameter 32 = WOF $end
$var parameter 32 > WOI $end
$var parameter 32 ? WRF $end
$var parameter 33 @ WRI $end
$scope module ina_zoom $end
$var wire 16 A in [15:0] $end
$var wire 16 B out [15:0] $end
$var parameter 32 C ROUND $end
$var parameter 32 D WIF $end
$var parameter 32 E WII $end
$var parameter 32 F WOF $end
$var parameter 32 G WOI $end
$var reg 8 H ini [7:0] $end
$var reg 16 I inr [15:0] $end
$var reg 8 J outf [7:0] $end
$var reg 8 K outi [7:0] $end
$var reg 1 L overflow $end
$scope begin genblk1 $end
$upscope $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 16 M in [15:0] $end
$var wire 16 N out [15:0] $end
$var parameter 32 O ROUND $end
$var parameter 32 P WIF $end
$var parameter 32 Q WII $end
$var parameter 32 R WOF $end
$var parameter 32 S WOI $end
$var reg 8 T ini [7:0] $end
$var reg 16 U inr [15:0] $end
$var reg 8 V outf [7:0] $end
$var reg 8 W outi [7:0] $end
$var reg 1 X overflow $end
$scope begin genblk1 $end
$upscope $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 17 Y in [16:0] $end
$var wire 16 Z out [15:0] $end
$var parameter 32 [ ROUND $end
$var parameter 32 \ WIF $end
$var parameter 33 ] WII $end
$var parameter 32 ^ WOF $end
$var parameter 32 _ WOI $end
$var reg 9 ` ini [8:0] $end
$var reg 17 a inr [16:0] $end
$var reg 8 b outf [7:0] $end
$var reg 8 c outi [7:0] $end
$var reg 1 2 overflow $end
$scope begin genblk1 $end
$upscope $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 _
b1000 ^
b1001 ]
b1000 \
b1 [
b1000 S
b1000 R
b1000 Q
b1000 P
b0 O
b1000 G
b1000 F
b1000 E
b1000 D
b0 C
b1001 @
b1000 ?
b1000 >
b1000 =
b1000 <
b1000 ;
b1000 :
b1000 9
b1000 8
b1000 7
b1 6
$end
#0
$dumpvars
bx c
bx b
bx a
bx `
bx Z
bx Y
0X
b0 W
b0 V
b0 U
b0 T
b0 N
bx M
0L
bz K
bz J
bz I
bz H
bz B
bz A
bz 5
b0 4
bx 3
02
bx 1
bx 0
bz /
x.
bx -
b0 ,
b0 +
bx *
bx )
0(
1'
1&
0%
bz $
0#
b101000000000 "
z!
$end
#5000
0&
#10000
b0 *
b0 0
b0 M
1#
b100000000000 "
1&
#15000
0&
#20000
0#
0'
1&
#25000
0&
#30000
b110 c
b110 `
b11000000000 )
b11000000000 3
b11000000000 Z
b0 b
b11000000000 a
b11000000000 1
b11000000000 Y
b110 K
b110 H
b11000000000 5
b11000000000 B
b0 J
b11000000000 I
0.
b11000000000 +
b11000000000 $
b11000000000 /
b11000000000 A
1!
1&
#35000
0&
#40000
b1100000000 )
b1100000000 3
b1100000000 Z
b11 c
b11 `
b1100000000 a
b1100000000 1
b1100000000 Y
b1100000000 5
b1100000000 B
b11 K
b11 H
b1100000000 I
1.
b1100000000 +
1%
b1100000000 $
b1100000000 /
b1100000000 A
1&
#45000
0&
#50000
1&
#55000
0&
#60000
1&
#65000
0&
#70000
1&
#75000
0&
#80000
1&
#85000
0&
#90000
1&
#95000
0&
#100000
1&
#105000
0&
#110000
1&
#115000
0&
#120000
1&
#125000
0&
#130000
1&
#135000
0&
#140000
1&
#145000
0&
#150000
1&
#150001
