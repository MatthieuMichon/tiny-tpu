$date
	Mon May 19 22:42:37 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module layer1 $end
$var wire 1 ! clk $end
$var wire 16 " in_bias_21 [15:0] $end
$var wire 16 # in_bias_22 [15:0] $end
$var wire 16 $ input_11 [15:0] $end
$var wire 16 % input_21 [15:0] $end
$var wire 16 & leak_factor [15:0] $end
$var wire 1 ' load_weights $end
$var wire 1 ( rst $end
$var wire 1 ) start $end
$var wire 16 * weight_11 [15:0] $end
$var wire 16 + weight_12 [15:0] $end
$var wire 16 , weight_21 [15:0] $end
$var wire 16 - weight_22 [15:0] $end
$var wire 16 . out_22_bias [15:0] $end
$var wire 16 / out_22 [15:0] $end
$var wire 16 0 out_21_bias [15:0] $end
$var wire 16 1 out_21 [15:0] $end
$var wire 16 2 out2 [15:0] $end
$var wire 16 3 out1 [15:0] $end
$scope module bias_21 $end
$var wire 16 4 bias_in [15:0] $end
$var wire 1 ! clk $end
$var wire 1 ( rst $end
$var wire 16 5 input_in [15:0] $end
$var reg 16 6 output_out [15:0] $end
$upscope $end
$scope module bias_22 $end
$var wire 16 7 bias_in [15:0] $end
$var wire 1 ! clk $end
$var wire 1 ( rst $end
$var wire 16 8 input_in [15:0] $end
$var reg 16 9 output_out [15:0] $end
$upscope $end
$scope module leaky_relu_21 $end
$var wire 1 ! clk $end
$var wire 16 : input_in [15:0] $end
$var wire 16 ; leak_factor [15:0] $end
$var wire 1 ( rst $end
$var wire 16 < mul_out [15:0] $end
$var reg 16 = out [15:0] $end
$scope module mul_inst $end
$var wire 16 > ina [15:0] $end
$var wire 16 ? inb [15:0] $end
$var wire 32 @ res [31:0] $end
$var wire 1 A overflow $end
$var wire 16 B out [15:0] $end
$scope module res_zoom $end
$var wire 32 C in [31:0] $end
$var wire 16 D out [15:0] $end
$var reg 16 E ini [15:0] $end
$var reg 24 F inr [23:0] $end
$var reg 8 G outf [7:0] $end
$var reg 8 H outi [7:0] $end
$var reg 1 A overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module leaky_relu_22 $end
$var wire 1 ! clk $end
$var wire 16 I input_in [15:0] $end
$var wire 16 J leak_factor [15:0] $end
$var wire 1 ( rst $end
$var wire 16 K mul_out [15:0] $end
$var reg 16 L out [15:0] $end
$scope module mul_inst $end
$var wire 16 M ina [15:0] $end
$var wire 16 N inb [15:0] $end
$var wire 32 O res [31:0] $end
$var wire 1 P overflow $end
$var wire 16 Q out [15:0] $end
$scope module res_zoom $end
$var wire 32 R in [31:0] $end
$var wire 16 S out [15:0] $end
$var reg 16 T ini [15:0] $end
$var reg 24 U inr [23:0] $end
$var reg 8 V outf [7:0] $end
$var reg 8 W outi [7:0] $end
$var reg 1 P overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module systolic_inst $end
$var wire 1 ! clk $end
$var wire 1 X done $end
$var wire 16 Y input_11 [15:0] $end
$var wire 16 Z input_21 [15:0] $end
$var wire 1 ' load_weights $end
$var wire 1 ( rst $end
$var wire 1 ) start $end
$var wire 16 [ weight_11 [15:0] $end
$var wire 16 \ weight_12 [15:0] $end
$var wire 16 ] weight_21 [15:0] $end
$var wire 16 ^ weight_22 [15:0] $end
$var wire 16 _ zero_wire_inputs [15:0] $end
$var wire 16 ` zero_wire_outputs [15:0] $end
$var wire 16 a psum_12 [15:0] $end
$var wire 16 b psum_11 [15:0] $end
$var wire 16 c out_22 [15:0] $end
$var wire 16 d out_21 [15:0] $end
$var wire 16 e input_21_out [15:0] $end
$var wire 16 f input_11_out [15:0] $end
$scope module pe11 $end
$var wire 1 ! clk $end
$var wire 16 g input_in [15:0] $end
$var wire 1 ' load_weight $end
$var wire 16 h psum_in [15:0] $end
$var wire 1 ( rst $end
$var wire 1 ) start $end
$var wire 16 i weight [15:0] $end
$var wire 16 j psum_reg [15:0] $end
$var wire 16 k mult_out [15:0] $end
$var reg 16 l input_out [15:0] $end
$var reg 16 m psum_out [15:0] $end
$var reg 16 n weight_reg [15:0] $end
$scope module adder $end
$var wire 16 o inb [15:0] $end
$var wire 17 p res [16:0] $end
$var wire 1 q overflow $end
$var wire 16 r out [15:0] $end
$var wire 16 s inbz [15:0] $end
$var wire 16 t inaz [15:0] $end
$var wire 16 u ina [15:0] $end
$scope module ina_zoom $end
$var wire 16 v out [15:0] $end
$var wire 16 w in [15:0] $end
$var reg 8 x ini [7:0] $end
$var reg 16 y inr [15:0] $end
$var reg 8 z outf [7:0] $end
$var reg 8 { outi [7:0] $end
$var reg 1 | overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 16 } in [15:0] $end
$var wire 16 ~ out [15:0] $end
$var reg 8 !" ini [7:0] $end
$var reg 16 "" inr [15:0] $end
$var reg 8 #" outf [7:0] $end
$var reg 8 $" outi [7:0] $end
$var reg 1 %" overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 17 &" in [16:0] $end
$var wire 16 '" out [15:0] $end
$var reg 9 (" ini [8:0] $end
$var reg 17 )" inr [16:0] $end
$var reg 8 *" outf [7:0] $end
$var reg 8 +" outi [7:0] $end
$var reg 1 q overflow $end
$scope begin genblk7 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module mult $end
$var wire 16 ," ina [15:0] $end
$var wire 16 -" inb [15:0] $end
$var wire 32 ." res [31:0] $end
$var wire 1 /" overflow $end
$var wire 16 0" out [15:0] $end
$scope module res_zoom $end
$var wire 32 1" in [31:0] $end
$var wire 16 2" out [15:0] $end
$var reg 16 3" ini [15:0] $end
$var reg 24 4" inr [23:0] $end
$var reg 8 5" outf [7:0] $end
$var reg 8 6" outi [7:0] $end
$var reg 1 /" overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module pe12 $end
$var wire 1 ! clk $end
$var wire 16 7" input_in [15:0] $end
$var wire 1 ' load_weight $end
$var wire 16 8" psum_in [15:0] $end
$var wire 1 ( rst $end
$var wire 1 ) start $end
$var wire 16 9" weight [15:0] $end
$var wire 16 :" psum_reg [15:0] $end
$var wire 16 ;" mult_out [15:0] $end
$var reg 16 <" input_out [15:0] $end
$var reg 16 =" psum_out [15:0] $end
$var reg 16 >" weight_reg [15:0] $end
$scope module adder $end
$var wire 16 ?" inb [15:0] $end
$var wire 17 @" res [16:0] $end
$var wire 1 A" overflow $end
$var wire 16 B" out [15:0] $end
$var wire 16 C" inbz [15:0] $end
$var wire 16 D" inaz [15:0] $end
$var wire 16 E" ina [15:0] $end
$scope module ina_zoom $end
$var wire 16 F" out [15:0] $end
$var wire 16 G" in [15:0] $end
$var reg 8 H" ini [7:0] $end
$var reg 16 I" inr [15:0] $end
$var reg 8 J" outf [7:0] $end
$var reg 8 K" outi [7:0] $end
$var reg 1 L" overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 16 M" in [15:0] $end
$var wire 16 N" out [15:0] $end
$var reg 8 O" ini [7:0] $end
$var reg 16 P" inr [15:0] $end
$var reg 8 Q" outf [7:0] $end
$var reg 8 R" outi [7:0] $end
$var reg 1 S" overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 17 T" in [16:0] $end
$var wire 16 U" out [15:0] $end
$var reg 9 V" ini [8:0] $end
$var reg 17 W" inr [16:0] $end
$var reg 8 X" outf [7:0] $end
$var reg 8 Y" outi [7:0] $end
$var reg 1 A" overflow $end
$scope begin genblk7 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module mult $end
$var wire 16 Z" ina [15:0] $end
$var wire 16 [" inb [15:0] $end
$var wire 32 \" res [31:0] $end
$var wire 1 ]" overflow $end
$var wire 16 ^" out [15:0] $end
$scope module res_zoom $end
$var wire 32 _" in [31:0] $end
$var wire 16 `" out [15:0] $end
$var reg 16 a" ini [15:0] $end
$var reg 24 b" inr [23:0] $end
$var reg 8 c" outf [7:0] $end
$var reg 8 d" outi [7:0] $end
$var reg 1 ]" overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module pe21 $end
$var wire 1 ! clk $end
$var wire 16 e" input_in [15:0] $end
$var wire 1 ' load_weight $end
$var wire 16 f" psum_in [15:0] $end
$var wire 1 ( rst $end
$var wire 1 ) start $end
$var wire 16 g" weight [15:0] $end
$var wire 16 h" psum_reg [15:0] $end
$var wire 16 i" mult_out [15:0] $end
$var reg 16 j" input_out [15:0] $end
$var reg 16 k" psum_out [15:0] $end
$var reg 16 l" weight_reg [15:0] $end
$scope module adder $end
$var wire 16 m" inb [15:0] $end
$var wire 17 n" res [16:0] $end
$var wire 1 o" overflow $end
$var wire 16 p" out [15:0] $end
$var wire 16 q" inbz [15:0] $end
$var wire 16 r" inaz [15:0] $end
$var wire 16 s" ina [15:0] $end
$scope module ina_zoom $end
$var wire 16 t" out [15:0] $end
$var wire 16 u" in [15:0] $end
$var reg 8 v" ini [7:0] $end
$var reg 16 w" inr [15:0] $end
$var reg 8 x" outf [7:0] $end
$var reg 8 y" outi [7:0] $end
$var reg 1 z" overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 16 {" in [15:0] $end
$var wire 16 |" out [15:0] $end
$var reg 8 }" ini [7:0] $end
$var reg 16 ~" inr [15:0] $end
$var reg 8 !# outf [7:0] $end
$var reg 8 "# outi [7:0] $end
$var reg 1 ## overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 17 $# in [16:0] $end
$var wire 16 %# out [15:0] $end
$var reg 9 &# ini [8:0] $end
$var reg 17 '# inr [16:0] $end
$var reg 8 (# outf [7:0] $end
$var reg 8 )# outi [7:0] $end
$var reg 1 o" overflow $end
$scope begin genblk7 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module mult $end
$var wire 16 *# ina [15:0] $end
$var wire 16 +# inb [15:0] $end
$var wire 32 ,# res [31:0] $end
$var wire 1 -# overflow $end
$var wire 16 .# out [15:0] $end
$scope module res_zoom $end
$var wire 32 /# in [31:0] $end
$var wire 16 0# out [15:0] $end
$var reg 16 1# ini [15:0] $end
$var reg 24 2# inr [23:0] $end
$var reg 8 3# outf [7:0] $end
$var reg 8 4# outi [7:0] $end
$var reg 1 -# overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module pe22 $end
$var wire 1 ! clk $end
$var wire 16 5# input_in [15:0] $end
$var wire 1 ' load_weight $end
$var wire 16 6# psum_in [15:0] $end
$var wire 1 ( rst $end
$var wire 1 ) start $end
$var wire 16 7# weight [15:0] $end
$var wire 16 8# psum_reg [15:0] $end
$var wire 16 9# mult_out [15:0] $end
$var reg 16 :# input_out [15:0] $end
$var reg 16 ;# psum_out [15:0] $end
$var reg 16 <# weight_reg [15:0] $end
$scope module adder $end
$var wire 16 =# inb [15:0] $end
$var wire 17 ># res [16:0] $end
$var wire 1 ?# overflow $end
$var wire 16 @# out [15:0] $end
$var wire 16 A# inbz [15:0] $end
$var wire 16 B# inaz [15:0] $end
$var wire 16 C# ina [15:0] $end
$scope module ina_zoom $end
$var wire 16 D# out [15:0] $end
$var wire 16 E# in [15:0] $end
$var reg 8 F# ini [7:0] $end
$var reg 16 G# inr [15:0] $end
$var reg 8 H# outf [7:0] $end
$var reg 8 I# outi [7:0] $end
$var reg 1 J# overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module inb_zoom $end
$var wire 16 K# in [15:0] $end
$var wire 16 L# out [15:0] $end
$var reg 8 M# ini [7:0] $end
$var reg 16 N# inr [15:0] $end
$var reg 8 O# outf [7:0] $end
$var reg 8 P# outi [7:0] $end
$var reg 1 Q# overflow $end
$scope begin genblk10 $end
$upscope $end
$scope begin genblk7 $end
$upscope $end
$upscope $end
$scope module res_zoom $end
$var wire 17 R# in [16:0] $end
$var wire 16 S# out [15:0] $end
$var reg 9 T# ini [8:0] $end
$var reg 17 U# inr [16:0] $end
$var reg 8 V# outf [7:0] $end
$var reg 8 W# outi [7:0] $end
$var reg 1 ?# overflow $end
$scope begin genblk7 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$scope module mult $end
$var wire 16 X# ina [15:0] $end
$var wire 16 Y# inb [15:0] $end
$var wire 32 Z# res [31:0] $end
$var wire 1 [# overflow $end
$var wire 16 \# out [15:0] $end
$scope module res_zoom $end
$var wire 32 ]# in [31:0] $end
$var wire 16 ^# out [15:0] $end
$var reg 16 _# ini [15:0] $end
$var reg 24 `# inr [23:0] $end
$var reg 8 a# outf [7:0] $end
$var reg 8 b# outi [7:0] $end
$var reg 1 [# overflow $end
$scope begin genblk4 $end
$upscope $end
$scope begin genblk9 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 b#
b0 a#
b0 `#
b0 _#
b0 ^#
bx ]#
b0 \#
0[#
bx Z#
bx Y#
bx X#
b0 W#
b0 V#
b0 U#
b0 T#
b0 S#
b0 R#
0Q#
b0 P#
b0 O#
b0 N#
b0 M#
b0 L#
bx K#
0J#
b0 I#
b0 H#
b0 G#
b0 F#
b0 E#
b0 D#
b0 C#
b0 B#
b0 A#
b0 @#
0?#
b0 >#
bx =#
bx <#
bx ;#
bx :#
b0 9#
b0 8#
bz 7#
bx 6#
bx 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
bx /#
b0 .#
0-#
bx ,#
bx +#
bz *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
0##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
bx {"
0z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
0o"
b0 n"
bx m"
bx l"
bx k"
bx j"
b0 i"
b0 h"
bz g"
bx f"
bz e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
bx _"
b0 ^"
0]"
bx \"
bx ["
bx Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
0S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
0L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
0A"
b0 @"
b0 ?"
bx >"
bx ="
bx <"
b0 ;"
b0 :"
bz 9"
b0 8"
bx 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
bx 1"
b0 0"
0/"
bx ."
bx -"
bz ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
0%"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
0|
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
0q
b0 p
b0 o
bx n
bx m
bx l
b0 k
b0 j
bz i
b0 h
bz g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
b0 _
bz ^
bz ]
bz \
bz [
bz Z
bz Y
0X
b0 W
b0 V
b0 U
b0 T
b0 S
bx R
b0 Q
0P
bx O
bz N
bx M
bx L
b0 K
bz J
bx I
b0 H
b0 G
b0 F
b0 E
b0 D
bx C
b0 B
0A
bx @
bz ?
bx >
bx =
b0 <
bz ;
bx :
bx 9
bx 8
bz 7
bx 6
bx 5
bz 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bz -
bz ,
bz +
bz *
z)
z(
z'
bz &
bz %
bz $
bz #
bz "
z!
$end
#1
